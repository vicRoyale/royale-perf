import { NextRequest } from 'next/server'
import { EventEmitter } from 'events'

// Singleton léger en mémoire (OK pour V1 mono-instance)
const emitter = globalThis.__SSE__ ?? new EventEmitter()
if (!(globalThis as any).__SSE__) (globalThis as any).__SSE__ = emitter

export function POST(){ return new Response('OK') }

export async function GET(req: NextRequest){
  const stream = new ReadableStream({
    start(controller) {
      const send = (event: any) => controller.enqueue(`data: ${JSON.stringify(event)}\n\n`)
      const onEvent = (e:any) => send(e)
      emitter.on('kpi:update', onEvent)
      send({ type:'connected' })
      const keepAlive = setInterval(() => controller.enqueue(`: keep-alive\n\n`), 15000)
      return () => { clearInterval(keepAlive); emitter.off('kpi:update', onEvent) }
    }
  })
  return new Response(stream, { headers: { 'Content-Type':'text/event-stream', 'Cache-Control':'no-cache', 'Connection':'keep-alive' } })
}

export function broadcastKpiUpdate(payload: any){ emitter.emit('kpi:update', payload) }

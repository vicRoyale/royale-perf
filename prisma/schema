generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  AGENT
}

enum GoalScope {
  GLOBAL
  TEAM
  USER
}

enum ActivityType {
  CALL
  EMAIL
  SMS
  DOORDOOR
  ESTIMATION
  VISITE
  RELANCE
}

enum MandateType {
  SIMPLE
  EXCLUSIF
}

enum OfferStatus {
  ACCEPTEE
  REFUSEE
  EN_NEGO
}

enum DealType {
  COMPROMIS
  ACTE
}

model User {
  id         String   @id @default(cuid())
  email      String   @unique
  hash       String
  firstName  String
  lastName   String
  role       Role
  active     Boolean  @default(true)
  team       Team?    @relation(fields: [teamId], references: [id])
  teamId     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  activities Activity[]
  leads      Lead[]
  mandates   Mandate[]
  visits     Visit[]
  offers     Offer[]
  deals      Deal[]
  properties Property[]
  auditLogs  AuditLog[]
}

model Team {
  id        String  @id @default(cuid())
  name      String
  manager   User?   @relation("TeamManager", fields: [managerId], references: [id])
  managerId String?
  members   User[]
  goals     Goal[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Goal {
  id        String    @id @default(cuid())
  scope     GoalScope
  period    DateTime  // premier jour du mois
  team      Team?     @relation(fields: [teamId], references: [id])
  teamId    String?
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?
  targetMandates        Int      @default(0)
  targetExclusive       Int      @default(0)
  targetRevenue         Float    @default(0)
  targetCalls           Int      @default(0)
  targetEstimations     Int      @default(0)
  targetVisits          Int      @default(0)
  targetDealsCompromis  Int      @default(0)
  targetDealsActes      Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([scope, period])
}

model Lead {
  id         String   @id @default(cuid())
  source     String
  contact    String
  status     String
  agent      User     @relation(fields: [agentId], references: [id])
  agentId    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  slaHours   Int      @default(0) // temps de réponse
  firstReply DateTime?
  activities Activity[]
  offers     Offer[]
  deals      Deal[]
  visits     Visit[]
}

model Activity {
  id        String       @id @default(cuid())
  type      ActivityType
  date      DateTime
  duration  Int?         // minutes
  notes     String?
  agent     User         @relation(fields: [agentId], references: [id])
  agentId   String
  lead      Lead?        @relation(fields: [leadId], references: [id])
  leadId    String?
  createdAt DateTime     @default(now())
  @@index([agentId, date])
}

model Property {
  id          String   @id @default(cuid())
  type        String
  address     String
  city        String
  postalCode  String
  surface     Float
  priceTarget Float
  agent       User     @relation(fields: [agentId], references: [id])
  agentId     String
  createdAt   DateTime @default(now())
}

model Mandate {
  id         String      @id @default(cuid())
  type       MandateType
  property   Property?   @relation(fields: [propertyId], references: [id])
  propertyId String?
  dateStart  DateTime
  dateEnd    DateTime?
  priceAsk   Float
  agent      User        @relation(fields: [agentId], references: [id])
  agentId    String
  createdAt  DateTime    @default(now())
}

model Visit {
  id         String    @id @default(cuid())
  property   Property? @relation(fields: [propertyId], references: [id])
  propertyId String?
  lead       Lead?     @relation(fields: [leadId], references: [id])
  leadId     String?
  date       DateTime
  result     String?
  agent      User      @relation(fields: [agentId], references: [id])
  agentId    String
  createdAt  DateTime  @default(now())
}

model Offer {
  id         String      @id @default(cuid())
  amount     Float
  status     OfferStatus
  date       DateTime
  agent      User        @relation(fields: [agentId], references: [id])
  agentId    String
  property   Property?   @relation(fields: [propertyId], references: [id])
  propertyId String?
  lead       Lead?       @relation(fields: [leadId], references: [id])
  leadId     String?
  createdAt  DateTime    @default(now())
  @@index([status, date])
}

model Deal {
  id         String   @id @default(cuid())
  type       DealType
  amount     Float
  commission Float
  date       DateTime
  agent      User     @relation(fields: [agentId], references: [id])
  agentId    String
  lead       Lead?    @relation(fields: [leadId], references: [id])
  leadId     String?
  property   Property? @relation(fields: [propertyId], references: [id])
  propertyId String?
  createdAt  DateTime  @default(now())
  @@index([type, date])
}

model KpiSnapshot {
  id       String   @id @default(cuid())
  period   DateTime // mois
  // Agrégats dénormalisés pour historisation
  calls    Int      @default(0)
  emails   Int      @default(0)
  sms      Int      @default(0)
  estimates Int     @default(0)
  visits   Int      @default(0)
  mandates Int      @default(0)
  exclusive Int     @default(0)
  offers   Int      @default(0)
  compromis Int     @default(0)
  actes    Int      @default(0)
  revenue  Float    @default(0)
  createdAt DateTime @default(now())
  @@unique([period])
}

model AuditLog {
  id        String   @id @default(cuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  action    String
  entity    String
  before    Json?
  after     Json?
  createdAt DateTime @default(now())
  @@index([entity, createdAt])
}
